[{"C:\\Users\\supre\\Docs\\GitHub\\ecomm\\src\\index.js":"1","C:\\Users\\supre\\Docs\\GitHub\\ecomm\\src\\reportWebVitals.js":"2","C:\\Users\\supre\\Docs\\GitHub\\ecomm\\src\\store.js":"3","C:\\Users\\supre\\Docs\\GitHub\\ecomm\\src\\App.js":"4","C:\\Users\\supre\\Docs\\GitHub\\ecomm\\src\\Reducers\\orderReducers.js":"5","C:\\Users\\supre\\Docs\\GitHub\\ecomm\\src\\Reducers\\cartReducers.js":"6","C:\\Users\\supre\\Docs\\GitHub\\ecomm\\src\\Reducers\\productReducers.js":"7","C:\\Users\\supre\\Docs\\GitHub\\ecomm\\src\\Reducers\\userReducers.js":"8","C:\\Users\\supre\\Docs\\GitHub\\ecomm\\src\\Components\\Footer.js":"9","C:\\Users\\supre\\Docs\\GitHub\\ecomm\\src\\Screens\\Homescreen.js":"10","C:\\Users\\supre\\Docs\\GitHub\\ecomm\\src\\Components\\Header.js":"11","C:\\Users\\supre\\Docs\\GitHub\\ecomm\\src\\Screens\\Cartscreen.js":"12","C:\\Users\\supre\\Docs\\GitHub\\ecomm\\src\\Screens\\Loginscreen.js":"13","C:\\Users\\supre\\Docs\\GitHub\\ecomm\\src\\Screens\\Productscreen.js":"14","C:\\Users\\supre\\Docs\\GitHub\\ecomm\\src\\Screens\\Profilescreen.js":"15","C:\\Users\\supre\\Docs\\GitHub\\ecomm\\src\\Screens\\Shippingscreen.js":"16","C:\\Users\\supre\\Docs\\GitHub\\ecomm\\src\\Screens\\UserListscreen.js":"17","C:\\Users\\supre\\Docs\\GitHub\\ecomm\\src\\Screens\\PlaceOrderscreen.js":"18","C:\\Users\\supre\\Docs\\GitHub\\ecomm\\src\\Screens\\Orderscreen.js":"19","C:\\Users\\supre\\Docs\\GitHub\\ecomm\\src\\Screens\\Paymentscreen.js":"20","C:\\Users\\supre\\Docs\\GitHub\\ecomm\\src\\Screens\\UserEditscreen.js":"21","C:\\Users\\supre\\Docs\\GitHub\\ecomm\\src\\Screens\\Registerscreen.js":"22","C:\\Users\\supre\\Docs\\GitHub\\ecomm\\src\\Screens\\ProductListscreen.js":"23","C:\\Users\\supre\\Docs\\GitHub\\ecomm\\src\\Screens\\ProductEditscreen.js":"24","C:\\Users\\supre\\Docs\\GitHub\\ecomm\\src\\Screens\\OrderListscreen.js":"25","C:\\Users\\supre\\Docs\\GitHub\\ecomm\\src\\Components\\Loader.js":"26","C:\\Users\\supre\\Docs\\GitHub\\ecomm\\src\\Components\\Message.js":"27","C:\\Users\\supre\\Docs\\GitHub\\ecomm\\src\\Components\\Product.js":"28","C:\\Users\\supre\\Docs\\GitHub\\ecomm\\src\\Components\\FormContainer.js":"29","C:\\Users\\supre\\Docs\\GitHub\\ecomm\\src\\Components\\Rating.js":"30","C:\\Users\\supre\\Docs\\GitHub\\ecomm\\src\\Constants\\userConstants.js":"31","C:\\Users\\supre\\Docs\\GitHub\\ecomm\\src\\Constants\\productConstants.js":"32","C:\\Users\\supre\\Docs\\GitHub\\ecomm\\src\\Constants\\cartConstants.js":"33","C:\\Users\\supre\\Docs\\GitHub\\ecomm\\src\\Constants\\orderConstants.js":"34","C:\\Users\\supre\\Docs\\GitHub\\ecomm\\src\\Actions\\cartActions.js":"35","C:\\Users\\supre\\Docs\\GitHub\\ecomm\\src\\Actions\\productActions.js":"36","C:\\Users\\supre\\Docs\\GitHub\\ecomm\\src\\Actions\\orderActions.js":"37","C:\\Users\\supre\\Docs\\GitHub\\ecomm\\src\\Actions\\userActions.js":"38","C:\\Users\\supre\\Docs\\GitHub\\ecomm\\src\\Components\\CheckoutSteps.js":"39","C:\\Users\\supre\\Docs\\GitHub\\ecomm\\src\\Components\\SearchBox.js":"40","C:\\Users\\supre\\Docs\\GitHub\\ecomm\\src\\Components\\Advertisement.js":"41"},{"size":613,"mtime":1632294622481,"results":"42","hashOfConfig":"43"},{"size":362,"mtime":499162500000,"results":"44","hashOfConfig":"43"},{"size":2382,"mtime":1632197957485,"results":"45","hashOfConfig":"43"},{"size":2260,"mtime":1631294439096,"results":"46","hashOfConfig":"43"},{"size":2340,"mtime":1631295260238,"results":"47","hashOfConfig":"43"},{"size":1356,"mtime":1630988667820,"results":"48","hashOfConfig":"43"},{"size":3372,"mtime":1632197926298,"results":"49","hashOfConfig":"43"},{"size":3903,"mtime":1631094207156,"results":"50","hashOfConfig":"43"},{"size":422,"mtime":1629739777431,"results":"51","hashOfConfig":"43"},{"size":1422,"mtime":1632294546543,"results":"52","hashOfConfig":"43"},{"size":3170,"mtime":1632204899163,"results":"53","hashOfConfig":"43"},{"size":6303,"mtime":1632722665943,"results":"54","hashOfConfig":"43"},{"size":2821,"mtime":1632301201043,"results":"55","hashOfConfig":"43"},{"size":4850,"mtime":1630318000390,"results":"56","hashOfConfig":"43"},{"size":7637,"mtime":1631295947260,"results":"57","hashOfConfig":"43"},{"size":3366,"mtime":1630940290821,"results":"58","hashOfConfig":"43"},{"size":3512,"mtime":1631084809303,"results":"59","hashOfConfig":"43"},{"size":6804,"mtime":1631008075977,"results":"60","hashOfConfig":"43"},{"size":5628,"mtime":1631008128714,"results":"61","hashOfConfig":"43"},{"size":2467,"mtime":1630940280269,"results":"62","hashOfConfig":"43"},{"size":3800,"mtime":1631265925567,"results":"63","hashOfConfig":"43"},{"size":4031,"mtime":1631089737562,"results":"64","hashOfConfig":"43"},{"size":4797,"mtime":1631198614986,"results":"65","hashOfConfig":"43"},{"size":7137,"mtime":1631293981149,"results":"66","hashOfConfig":"43"},{"size":3619,"mtime":1631294589020,"results":"67","hashOfConfig":"43"},{"size":248,"mtime":1630173613120,"results":"68","hashOfConfig":"43"},{"size":205,"mtime":1630173912473,"results":"69","hashOfConfig":"43"},{"size":1191,"mtime":1629794630758,"results":"70","hashOfConfig":"43"},{"size":392,"mtime":1630479130661,"results":"71","hashOfConfig":"43"},{"size":1611,"mtime":1629739987141,"results":"72","hashOfConfig":"43"},{"size":1508,"mtime":1631093823746,"results":"73","hashOfConfig":"43"},{"size":1280,"mtime":1632197849727,"results":"74","hashOfConfig":"43"},{"size":293,"mtime":1630923363857,"results":"75","hashOfConfig":"43"},{"size":814,"mtime":1631295033730,"results":"76","hashOfConfig":"43"},{"size":1561,"mtime":1631209333844,"results":"77","hashOfConfig":"43"},{"size":4621,"mtime":1632210280498,"results":"78","hashOfConfig":"43"},{"size":3837,"mtime":1631295490211,"results":"79","hashOfConfig":"43"},{"size":6782,"mtime":1631295573974,"results":"80","hashOfConfig":"43"},{"size":1626,"mtime":1630923151920,"results":"81","hashOfConfig":"43"},{"size":1007,"mtime":1632157653554,"results":"82","hashOfConfig":"43"},{"size":1151,"mtime":1632204658034,"results":"83","hashOfConfig":"43"},{"filePath":"84","messages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},"166iwhn",{"filePath":"87","messages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"89","messages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"91","messages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"93","messages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"95","messages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"97","messages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"99","messages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"101","messages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"103","messages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"86"},{"filePath":"106","messages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"108","messages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110"},{"filePath":"111","messages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"113","messages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"115","messages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"86"},{"filePath":"118","messages":"119","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"120","messages":"121","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"86"},{"filePath":"123","messages":"124","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"86"},{"filePath":"126","messages":"127","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"86"},{"filePath":"129","messages":"130","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"131","messages":"132","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"86"},{"filePath":"134","messages":"135","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"86"},{"filePath":"137","messages":"138","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"86"},{"filePath":"140","messages":"141","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"86"},{"filePath":"143","messages":"144","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"86"},{"filePath":"146","messages":"147","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"148","messages":"149","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"150","messages":"151","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"152","messages":"153","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"154","messages":"155","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"156","messages":"157","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"158","messages":"159","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"160","messages":"161","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"162","messages":"163","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"164","messages":"165","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"166","usedDeprecatedRules":"86"},{"filePath":"167","messages":"168","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"169","usedDeprecatedRules":"86"},{"filePath":"170","messages":"171","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"172","usedDeprecatedRules":"86"},{"filePath":"173","messages":"174","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"175","usedDeprecatedRules":"86"},{"filePath":"176","messages":"177","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"178","messages":"179","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"180","usedDeprecatedRules":"86"},{"filePath":"181","messages":"182","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"183","usedDeprecatedRules":"86"},"C:\\Users\\supre\\Docs\\GitHub\\ecomm\\src\\index.js",[],["184","185"],"C:\\Users\\supre\\Docs\\GitHub\\ecomm\\src\\reportWebVitals.js",[],"C:\\Users\\supre\\Docs\\GitHub\\ecomm\\src\\store.js",[],"C:\\Users\\supre\\Docs\\GitHub\\ecomm\\src\\App.js",[],"C:\\Users\\supre\\Docs\\GitHub\\ecomm\\src\\Reducers\\orderReducers.js",[],"C:\\Users\\supre\\Docs\\GitHub\\ecomm\\src\\Reducers\\cartReducers.js",[],"C:\\Users\\supre\\Docs\\GitHub\\ecomm\\src\\Reducers\\productReducers.js",[],"C:\\Users\\supre\\Docs\\GitHub\\ecomm\\src\\Reducers\\userReducers.js",[],"C:\\Users\\supre\\Docs\\GitHub\\ecomm\\src\\Components\\Footer.js",[],"C:\\Users\\supre\\Docs\\GitHub\\ecomm\\src\\Screens\\Homescreen.js",["186"],"import Row from 'react-bootstrap/Row'\r\nimport Col from 'react-bootstrap/Col'\r\n\r\nimport { useState,useEffect } from 'react'\r\nimport {useDispatch,useSelector} from 'react-redux'\r\n//My components\r\nimport Product from '../Components/Product'\r\nimport Loader from '../Components/Loader'\r\nimport Message from '../Components/Message'\r\nimport Advertisement from '../Components/Advertisement'\r\n//actions\r\nimport {listProducts} from '../Actions/productActions'\r\n\r\nfunction Homescreen({history}) {\r\n\r\n    const dispatch = useDispatch()\r\n    const productList = useSelector(state => state.productList)\r\n    const {products,error,loading} = productList\r\n\r\n    let keyword = history.location.search\r\n    \r\n    useEffect(()=>{\r\n        dispatch(listProducts(keyword))\r\n        \r\n    }, [dispatch,keyword])\r\n\r\n\r\n    return (\r\n   <div>\r\n       {loading ? <Loader />\r\n                : error ? <Message variant=\"danger\">{error}</Message>\r\n                    : (<>\r\n                        <Advertisement />\r\n                       <Row>\r\n                        {products.map(product => (\r\n                            <Col key={product._id} xs={6} sm={4} lg={6} xl={4}>\r\n                            <Product product={product} />\r\n                            </Col>\r\n                        ))}\r\n                    \r\n                    </Row>\r\n                    </> )\r\n        }\r\n    </div>\r\n    \r\n    )\r\n\r\n}\r\n\r\nexport default Homescreen","C:\\Users\\supre\\Docs\\GitHub\\ecomm\\src\\Components\\Header.js",[],"C:\\Users\\supre\\Docs\\GitHub\\ecomm\\src\\Screens\\Cartscreen.js",["187","188","189"],"import { useEffect } from 'react';\r\nimport {useDispatch,useSelector} from 'react-redux'\r\nimport {Row,Col,ListGroup,Image,Form,Button,Card} from 'react-bootstrap'\r\nimport {Link} from 'react-router-dom'\r\n\r\n//Actions\r\nimport {addToCart,removeFromCart } from '../Actions/cartActions'\r\n\r\n//My components\r\nimport Message from '../Components/Message'\r\n\r\n\r\nfunction Cartscreen({match,location,history}) {\r\n    const queryParams = new URLSearchParams(window.location.search);\r\n    const qty = parseInt(queryParams.get('qty'));\r\n    const dispatch = useDispatch()\r\n\r\n    const cart = useSelector(state => state.cart)\r\n    const {cartItems} = cart\r\n    let totalItems = cartItems.reduce((acc, item) => acc + item.qty, 0)\r\n    let totalAmount = cartItems.reduce((acc, item) => acc + item.qty * item.price, 0).toFixed(2)\r\n    \r\n    useEffect(()=>{\r\n        if(match.params.id){\r\n            dispatch(addToCart(match.params.id,qty))\r\n        }\r\n        totalItems = cartItems.reduce((acc, item) => acc + item.qty, 0)\r\n        totalAmount = cartItems.reduce((acc, item) => acc + item.qty * item.price, 0).toFixed(2)\r\n    },[dispatch,match.params.id,qty])\r\n\r\n    const handleRemoveFromCart = (id) => {\r\n        dispatch(removeFromCart(id))\r\n    }\r\n    const handleCheckout = () => {\r\n        history.push('/login?redirect=shipping')\r\n    }\r\n    \r\n    console.log(cartItems)\r\n  \r\n    return(\r\n        <Row>\r\n            <Col xs={12} md={8}>\r\n                <h2>Shopping Cart</h2>\r\n                {cartItems.length?\r\n                                    (<ListGroup variant=\"flush\">\r\n                                        {cartItems.map(item => (\r\n                                            <ListGroup.Item key={item.product}>\r\n                                                <Row className = \"align-items-start\">\r\n                                                    <Col xs={3} md={2} >\r\n                                                        <Link to = {`/product/${item.product}`}>\r\n                                                         <Image src={item.image} alt={item.name} fluid thumbnail/>\r\n                                                        </Link>\r\n                                                       \r\n                                                    </Col>\r\n                                                    <Col xs={3} md={3}>\r\n                                                        <Link className = \"text-decoration-none align-middle\" to = {`/product/${item.product}`}>\r\n                                                            {item.name}\r\n                                                        </Link>\r\n                                                    </Col>\r\n                                                    <Col xs={3} md={2} className = \"py-1\">\r\n                                                       <span className=\"align-middle\">&#8377;{item.price}</span>\r\n                                                    </Col>\r\n                                                    <Col xs={2} md={2} className=\"py-1\">\r\n                                                        <label htmlFor=\"qty\">Qty</label> \r\n                                                        <select\r\n                                                            id=\"qty\"\r\n                                                            value={item.qty}\r\n                                                            onChange={(e) => dispatch(addToCart(item.product, Number(e.target.value)))}\r\n                                                        >\r\n                                                            {\r\n\r\n                                                                [...Array(item.countInStock).keys()].map((x) => (\r\n                                                                    <option key={x + 1} value={x + 1}>\r\n                                                                        {x + 1}\r\n                                                                    </option>\r\n                                                                ))\r\n                                                            }\r\n\r\n                                                        </select>\r\n                                                    </Col>\r\n                                                    <Col xs={1} md={1}>\r\n                                                        <Button\r\n                                                            type='button'\r\n                                                            variant='light'\r\n                                                            onClick={() => handleRemoveFromCart(item.product)}\r\n                                                        >\r\n                                                            <i className='fas fa-trash'></i>\r\n                                                        </Button>\r\n                                                </Col>\r\n                                            </Row>\r\n                                                \r\n\r\n                                            </ListGroup.Item>\r\n                                        ))}\r\n                                    </ListGroup>\r\n                                    )\r\n                                    : <Message variant=\"info\">Your cart is empty. <Link to=\"/\">Start shopping</Link></Message>\r\n                }\r\n            </Col>\r\n\r\n            <Col xs={8} md={4}>\r\n            <Card>\r\n                    <ListGroup variant='flush'>\r\n                        <ListGroup.Item>\r\n                            <h3>Total ({totalItems}) items</h3>\r\n                            <h4>Amount &#8377;{totalAmount}</h4>\r\n                        </ListGroup.Item>\r\n                   \r\n\r\n                    <ListGroup.Item>\r\n                        <Button\r\n                            type='button'\r\n                            className='btn-block'\r\n                            disabled={cartItems.length === 0}\r\n                            onClick={handleCheckout}\r\n                        >\r\n                            Proceed To Checkout\r\n                        </Button>\r\n                    </ListGroup.Item>\r\n\r\n                    </ListGroup>\r\n                </Card>\r\n            </Col>\r\n        </Row>\r\n    )\r\n}\r\n\r\nexport default Cartscreen","C:\\Users\\supre\\Docs\\GitHub\\ecomm\\src\\Screens\\Loginscreen.js",[],"C:\\Users\\supre\\Docs\\GitHub\\ecomm\\src\\Screens\\Productscreen.js",[],"C:\\Users\\supre\\Docs\\GitHub\\ecomm\\src\\Screens\\Profilescreen.js",["190"],"\r\n    import {useState,useEffect} from 'react'\r\n    import {useDispatch,useSelector} from 'react-redux'\r\n    import Form from 'react-bootstrap/Form'\r\n    import Button from 'react-bootstrap/Button'\r\n    import Row from 'react-bootstrap/Row'\r\n    import Col from 'react-bootstrap/Col'\r\n    import Table from 'react-bootstrap/Table'\r\n    import { LinkContainer } from 'react-router-bootstrap'\r\n    import { Link } from 'react-router-dom'\r\n    //My components\r\n    \r\n    import {getUserDetails,updateUserProfile} from '../Actions/userActions'\r\n    import { listMyOrders } from '../Actions/orderActions'\r\n    \r\n    import Loader from '../Components/Loader'\r\n    import Message from '../Components/Message'\r\n    import { USER_UPDATE_PROFILE_RESET } from '../Constants/userConstants'\r\n\r\n    function Profilescreen({location,history}) {\r\n        \r\n        const userLogin = useSelector(state=>state.userLogin)\r\n        const {userInfo} = userLogin\r\n\r\n        const [name,setName] = useState()\r\n        const [email,setEmail] = useState()\r\n        const [password,setPassword] = useState()\r\n        const [confirmPassword,setConfirmPassword] = useState()\r\n     \r\n    \r\n        const dispatch = useDispatch()\r\n        \r\n        const userDetails = useSelector(state=>state.userDetails)\r\n        const {loading,error,user} = userDetails\r\n\r\n        const userUpdateProfile = useSelector(state=>state.userUpdateProfile)\r\n        const {success} = userUpdateProfile\r\n\r\n        const orderListMy = useSelector(state=>state.orderListMy)\r\n        const {loading:loadingOrders,error:errorOrders,orders} = orderListMy\r\n\r\n        useEffect(()=>{\r\n            if(!userInfo){\r\n                history.push(\"/login\")\r\n            }else {\r\n                if (!user || !user.name || success || userInfo.id !== user._id) {                \r\n                    dispatch(getUserDetails('profile'))\r\n                    dispatch(listMyOrders())\r\n                    dispatch({type:USER_UPDATE_PROFILE_RESET})\r\n                }\r\n                else{\r\n                    setEmail(user.email)\r\n                    setName(user.name)\r\n                }\r\n            }\r\n        },[dispatch,userInfo,history,user,success])\r\n    \r\n        const handleUpdate = (e) => {\r\n            e.preventDefault()\r\n            dispatch(updateUserProfile(\r\n                {'id':user._id,\r\n                'name':name,\r\n                'email':email,\r\n                'password':password}))\r\n        }\r\n        return(\r\n            <Row>\r\n                <Col sm={3}>\r\n                    {loading && <Loader />}\r\n                    {error && <Message variant =\"danger\">{error}</Message>}\r\n                    <Form onSubmit = {handleUpdate}>\r\n                        <h2>User Profile</h2>  \r\n                        <Form.Group className=\"mb-3\" controlId=\"Name\">\r\n                            <Form.Label>UserName</Form.Label>\r\n                            <Form.Control \r\n                            type=\"text\" \r\n                            placeholder=\"Enter your name\"\r\n                            value = {name}\r\n                            onChange = {(e) => setName(e.target.value)} \r\n                            required />\r\n                        </Form.Group>\r\n        \r\n                        <Form.Group className=\"mb-3\" controlId=\"formBasicEmail\">\r\n                            <Form.Label>Email address</Form.Label>\r\n                            <Form.Control \r\n                            type=\"email\" \r\n                            placeholder=\"Enter email\"\r\n                            value = {email}\r\n                            onChange = {(e) => setEmail(e.target.value)}\r\n                            required />\r\n                            <Form.Text className=\"text-muted\">\r\n                                Please enter a valid email id \r\n                            </Form.Text>\r\n                        </Form.Group>\r\n        \r\n                        <Form.Group className=\"mb-3\" controlId=\"formBasicPassword\">\r\n                            <Form.Label>Password</Form.Label>\r\n                            <Form.Control \r\n                            type=\"password\" \r\n                            placeholder=\"Password\"\r\n                            value = {password}\r\n                            onChange = {(e) => setPassword(e.target.value)}  \r\n                            />\r\n                        </Form.Group>\r\n        \r\n                        <Form.Group className=\"mb-3\" controlId=\"formConfirmPassword\">\r\n                            <Form.Label>Confirm Password</Form.Label>\r\n                            <Form.Control \r\n                            type=\"password\" \r\n                            placeholder=\"Confirm Password\"\r\n                            value = {confirmPassword}\r\n                            onChange = {(e) => setConfirmPassword(e.target.value)}  \r\n                            />\r\n                        </Form.Group>\r\n                        {confirmPassword && (password !== confirmPassword) &&\r\n                        <Message variant=\"danger\">Passwords do not match </Message>}\r\n        \r\n                        <Button variant=\"primary\" \r\n                        type=\"submit\" \r\n                        disabled = {confirmPassword && (password !== confirmPassword)}\r\n                        onClick= {handleUpdate}>\r\n                            Update\r\n                        </Button>\r\n                    </Form>\r\n                </Col>\r\n                <Col>\r\n                    <h2>My Orders</h2>\r\n                    {loadingOrders ? (\r\n                    <Loader />\r\n                ) : errorOrders ? (\r\n                    <Message variant='danger'>{errorOrders}</Message>\r\n                ) : (\r\n                            <Table striped responsive className='table-sm'>\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>ID</th>\r\n                                        <th>Date</th>\r\n                                        <th>Total</th>\r\n                                        <th>Paid</th>\r\n                                        <th>Delivered</th>\r\n                                        <th></th>\r\n                                    </tr>\r\n                                </thead>\r\n\r\n                                <tbody>\r\n                                    {orders.map(order => (\r\n                                        <tr key={order._id}>\r\n                                            <td>{order._id}</td>\r\n                                            <td>{order.createdAt.substring(0, 10)}</td>\r\n                                            <td>&#8377;{order.totalPrice}</td>\r\n                                            <td>{order.isPaid ? order.paidAt.substring(0, 10) : (\r\n                                                <i className='fas fa-times' style={{ color: 'red' }}></i>\r\n                                            )}</td>\r\n                                            <td>\r\n                                                <LinkContainer to={`/order/${order._id}`}>\r\n                                                    <Button className='btn-sm'>Details</Button>\r\n                                                </LinkContainer>\r\n                                            </td>\r\n                                        </tr>\r\n                                    ))}\r\n                                </tbody>\r\n                            </Table>\r\n                        )}\r\n                </Col>\r\n                \r\n            </Row>\r\n                \r\n\r\n            )\r\n}\r\n\r\nexport default Profilescreen","C:\\Users\\supre\\Docs\\GitHub\\ecomm\\src\\Screens\\Shippingscreen.js",[],"C:\\Users\\supre\\Docs\\GitHub\\ecomm\\src\\Screens\\UserListscreen.js",["191","192"],"import react ,{useEffect,useState} from 'react'\r\nimport Table from 'react-bootstrap/Table'\r\nimport Button from 'react-bootstrap/Button'\r\nimport { LinkContainer } from 'react-router-bootstrap'\r\nimport {useDispatch,useSelector} from 'react-redux'\r\nimport {getUserList,deleteUser} from '../Actions/userActions'\r\n\r\n//My components\r\nimport Loader from '../Components/Loader'\r\nimport Message from '../Components/Message'\r\n\r\nfunction UserListscreen ({history}) {\r\n    const dispatch = useDispatch()\r\n\r\n    const userLogin = useSelector(state => state.userLogin)\r\n    const {userInfo} = userLogin\r\n\r\n    const userList = useSelector(state => state.userList)\r\n    const {loading,error,users} = userList\r\n\r\n    const userDelete = useSelector(state => state.userDelete)\r\n    const {success:successDelete} = {userDelete}\r\n\r\n    useEffect(()=>{\r\n        if(userInfo && userInfo.isAdmin)  {\r\n           dispatch(getUserList()) \r\n        }else{\r\n            history.push('/login')\r\n        }\r\n    },[dispatch,userInfo,history,successDelete])\r\n\r\n    function deleteHandler(id,name){\r\n        if(window.confirm(`Delete user ${name}?`)){\r\n            dispatch(deleteUser(id))\r\n        }\r\n    }\r\n\r\n    return loading? (<Loader/>)\r\n                  : error? (<Message variant=\"danger\">{error}</Message>)\r\n                        : (\r\n                            <Table striped bordered hover responsive size=\"sm\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th>ID</th>\r\n                                <th>NAME</th>\r\n                                <th>EMAIL</th>\r\n                                <th>ADMIN</th>\r\n                                <th>EDIT/DELETE</th>\r\n                            </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                            {users.map(user => (\r\n                                    <tr key={user._id}>\r\n                                        <td>{user._id}</td>\r\n                                        <td>{user.name}</td>\r\n                                        <td>{user.email}</td>\r\n                                        <td>{user.isAdmin ? (\r\n                                            <i className='fas fa-check' style={{ color: 'green' }}></i>\r\n                                        ) : (\r\n                                                <i className='fas fa-times' style={{ color: 'red' }}></i>\r\n                                            )}</td>\r\n\r\n                                        <td>\r\n                                            <LinkContainer to={`/admin/user/${user._id}/edit`}>\r\n                                                <Button variant='light' className='btn-sm'>\r\n                                                    <i className='fas fa-edit'></i>\r\n                                                </Button>\r\n                                            </LinkContainer>\r\n\r\n                                            <Button variant='danger' className='btn-sm' onClick={() => deleteHandler(user._id,user.name)}>\r\n                                                <i className='fas fa-trash'></i>\r\n                                            </Button>\r\n                                        </td>\r\n                                    </tr>\r\n                                ))}\r\n                                \r\n                            </tbody>\r\n                        </Table>\r\n                    )\r\n    }\r\n        \r\n\r\n\r\nexport default UserListscreen","C:\\Users\\supre\\Docs\\GitHub\\ecomm\\src\\Screens\\PlaceOrderscreen.js",["193","194"],"import React, { useEffect } from 'react'\r\nimport { Button, Row, Col, ListGroup, Image, Card } from 'react-bootstrap'\r\nimport { Link } from 'react-router-dom'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport Message from '../Components/Message'\r\nimport CheckoutSteps from '../Components/CheckoutSteps'\r\nimport { createOrder } from '../Actions/orderActions'\r\nimport { ORDER_CREATE_RESET } from '../Constants/orderConstants'\r\n\r\nfunction PlaceOrderscreen({ history }) {\r\n    \r\n    const orderCreate = useSelector(state => state.orderCreate)\r\n    const { order, error, success } = orderCreate\r\n\r\n\r\n    const dispatch = useDispatch()\r\n    \r\n    const cart = useSelector(state => state.cart)\r\n\r\n    cart.itemsPrice = cart.cartItems.reduce((acc, item) => acc + item.price * item.qty, 0).toFixed(2)\r\n    cart.shippingPrice = (cart.itemsPrice > 100 ? 0 : 10).toFixed(2)\r\n    cart.taxPrice = Number((0.18) * cart.itemsPrice).toFixed(2)\r\n\r\n    cart.totalPrice = (Number(cart.itemsPrice) + Number(cart.shippingPrice) + Number(cart.taxPrice)).toFixed(2)\r\n\r\n\r\n    if (!cart.paymentMethod) {\r\n        history.push('/payment')\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (success) {\r\n            console.log(order._id)\r\n            history.push(`/order/${order._id}`)\r\n            //dispatch({ type: ORDER_CREATE_RESET })\r\n        }\r\n    }, [success, history])\r\n\r\n\r\n    const placeOrder = () => {\r\n\r\n       dispatch(createOrder({\r\n            orderItems: cart.cartItems,\r\n            shippingAddress: cart.shippingAddress,\r\n            paymentMethod: cart.paymentMethod,\r\n            itemsPrice: cart.itemsPrice,\r\n            shippingPrice: cart.shippingPrice,\r\n            taxPrice: cart.taxPrice,\r\n            totalPrice: cart.totalPrice,\r\n        }))\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <CheckoutSteps step1 step2 step3 step4 />\r\n            <Row>\r\n                <Col md={8}>\r\n                    <ListGroup variant='flush'>\r\n                        <ListGroup.Item>\r\n                            <h2>Shipping</h2>\r\n\r\n                            <p>\r\n                                <strong>Shipping: </strong>\r\n                                {cart.shippingAddress.address},  {cart.shippingAddress.city}\r\n                                {'  '}\r\n                                {cart.shippingAddress.postalCode},\r\n                                {'  '}\r\n                                {cart.shippingAddress.country}\r\n                            </p>\r\n                        </ListGroup.Item>\r\n\r\n                        <ListGroup.Item>\r\n                            <h2>Payment Method</h2>\r\n                            <p>\r\n                                <strong>Method: </strong>\r\n                                {cart.paymentMethod}\r\n                            </p>\r\n                        </ListGroup.Item>\r\n\r\n                        <ListGroup.Item>\r\n                            <h2>Order Items</h2>\r\n                            {cart.cartItems.length === 0 ? <Message variant='info'>\r\n                                Your cart is empty\r\n                            </Message> : (\r\n                                    <ListGroup variant='flush'>\r\n                                        {cart.cartItems.map((item, index) => (\r\n                                            <ListGroup.Item key={index}>\r\n                                                <Row>\r\n                                                    <Col md={1}>\r\n                                                        <Image src={item.image} alt={item.name} fluid rounded />\r\n                                                    </Col>\r\n\r\n                                                    <Col>\r\n                                                        <Link to={`/product/${item.product}`}>{item.name}</Link>\r\n                                                    </Col>\r\n\r\n                                                    <Col md={4}>\r\n                                                        {item.qty} X &#8377;{item.price} = &#8377;{(item.qty * item.price).toFixed(2)}\r\n                                                    </Col>\r\n                                                </Row>\r\n                                            </ListGroup.Item>\r\n                                        ))}\r\n                                    </ListGroup>\r\n                                )}\r\n                        </ListGroup.Item>\r\n\r\n                    </ListGroup>\r\n\r\n                </Col>\r\n\r\n                <Col md={4}>\r\n                    <Card>\r\n                        <ListGroup variant='flush'>\r\n                            <ListGroup.Item>\r\n                                <h2>Order Summary</h2>\r\n                            </ListGroup.Item>\r\n\r\n                            <ListGroup.Item>\r\n                                <Row>\r\n                                    <Col>Items:</Col>\r\n                                    <Col>&#8377;{cart.itemsPrice}</Col>\r\n                                </Row>\r\n                            </ListGroup.Item>\r\n\r\n                            <ListGroup.Item>\r\n                                <Row>\r\n                                    <Col>Shipping:</Col>\r\n                                    <Col>&#8377;{cart.shippingPrice}</Col>\r\n                                </Row>\r\n                            </ListGroup.Item>\r\n\r\n                            <ListGroup.Item>\r\n                                <Row>\r\n                                    <Col>GST:</Col>\r\n                                    <Col>&#8377;{cart.taxPrice}</Col>\r\n                                </Row>\r\n                            </ListGroup.Item>\r\n\r\n                            <ListGroup.Item>\r\n                                <Row>\r\n                                    <Col>Total:</Col>\r\n                                    <Col>&#8377;{cart.totalPrice}</Col>\r\n                                </Row>\r\n                            </ListGroup.Item>\r\n\r\n\r\n                            <ListGroup.Item>\r\n                                {error && <Message variant='danger'>{error}</Message>}\r\n                            </ListGroup.Item>\r\n\r\n                            <ListGroup.Item>\r\n                                <Button\r\n                                    type='button'\r\n                                    className='btn-block'\r\n                                    disabled={cart.cartItems === 0}\r\n                                    onClick={placeOrder}\r\n                                >\r\n                                    Place Order\r\n                                </Button>\r\n                            </ListGroup.Item>\r\n\r\n                        </ListGroup>\r\n                    </Card>\r\n                </Col>\r\n            </Row>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PlaceOrderscreen","C:\\Users\\supre\\Docs\\GitHub\\ecomm\\src\\Screens\\Orderscreen.js",["195"],"import React, { useEffect } from 'react'\r\nimport { Button, Row, Col, ListGroup, Image, Card } from 'react-bootstrap'\r\nimport { Link } from 'react-router-dom'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport Message from '../Components/Message'\r\nimport Loader from '../Components/Loader'\r\n\r\nimport { getOrderDetails} from '../Actions/orderActions'\r\n\r\n\r\nfunction Orderscreen({ match}) {\r\n    \r\n    const orderDetails = useSelector(state => state.orderDetails)\r\n    const { order,loading, error } = orderDetails\r\n    const orderId = match.params.id\r\n    console.log(orderId)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n\r\n        if (!order || order._id !== Number(orderId)) {\r\n            dispatch(getOrderDetails(orderId))\r\n        }\r\n    }, [dispatch,order,orderId])\r\n\r\n\r\n\r\n    return loading? (<Loader />)\r\n            : error? (<Message variant=\"danger\">{error}</Message>)\r\n            :(<div>\r\n                <h1>Order: {order.Id}</h1>\r\n            <Row>\r\n                <Col md={8}>\r\n                    <ListGroup variant='flush'>\r\n                        <ListGroup.Item>\r\n                            <h2>Shipping</h2>\r\n\r\n                            <p>\r\n                                <strong>Shipping: </strong>\r\n                                {order.shippingAddress.address},  {order.shippingAddress.city}\r\n                                {'  '}\r\n                                {order.shippingAddress.postalCode},\r\n                                {'  '}\r\n                                {order.shippingAddress.country}\r\n                            </p>\r\n                        </ListGroup.Item>\r\n\r\n                        <ListGroup.Item>\r\n                            <h2>Payment Method</h2>\r\n                            <p>\r\n                                <strong>Method: </strong>\r\n                                {order.paymentMethod}\r\n                            </p>\r\n                        </ListGroup.Item>\r\n                        {order.isPaid ? (\r\n                                        <Message variant='success'>Paid on {order.paidAt}</Message>\r\n                                    ) : (\r\n                                            <Message variant='warning'>Payment pending</Message>\r\n                                        )}\r\n\r\n                        <ListGroup.Item>\r\n                            <h2>Order Items</h2>\r\n                            {order.orderItems.length === 0 ? <Message variant='info'>\r\n                                Your order is empty\r\n                            </Message> : (\r\n                                    <ListGroup variant='flush'>\r\n                                        {order.orderItems.map((item, index) => (\r\n                                            <ListGroup.Item key={index}>\r\n                                                <Row>\r\n                                                    <Col md={1}>\r\n                                                        <Image src={item.image} alt={item.name} fluid rounded />\r\n                                                    </Col>\r\n\r\n                                                    <Col>\r\n                                                        <Link to={`/product/${item.product}`}>{item.name}</Link>\r\n                                                    </Col>\r\n\r\n                                                    <Col md={4}>\r\n                                                        {item.qty} X &#8377;{item.price} = &#8377;{(item.qty * item.price).toFixed(2)}\r\n                                                    </Col>\r\n                                                </Row>\r\n                                            </ListGroup.Item>\r\n                                        ))}\r\n                                    </ListGroup>\r\n                                )}\r\n                        </ListGroup.Item>\r\n\r\n                    </ListGroup>\r\n\r\n                </Col>\r\n\r\n                <Col md={4}>\r\n                    <Card>\r\n                        <ListGroup variant='flush'>\r\n                            <ListGroup.Item>\r\n                                <h2>Order Summary</h2>\r\n                            </ListGroup.Item>\r\n\r\n                            <ListGroup.Item>\r\n                                <Row>\r\n                                    <Col>Items:</Col>\r\n                                    <Col>&#8377;{(order.totalPrice-order.taxPrice-order.shippingPrice).toFixed(2)}</Col>\r\n                                </Row>\r\n                            </ListGroup.Item>\r\n\r\n                            <ListGroup.Item>\r\n                                <Row>\r\n                                    <Col>Shipping:</Col>\r\n                                    <Col>&#8377;{order.shippingPrice}</Col>\r\n                                </Row>\r\n                            </ListGroup.Item>\r\n\r\n                            <ListGroup.Item>\r\n                                <Row>\r\n                                    <Col>GST:</Col>\r\n                                    <Col>&#8377;{order.taxPrice}</Col>\r\n                                </Row>\r\n                            </ListGroup.Item>\r\n\r\n                            <ListGroup.Item>\r\n                                <Row>\r\n                                    <Col>Total:</Col>\r\n                                    <Col>&#8377;{order.totalPrice}</Col>\r\n                                </Row>\r\n                            </ListGroup.Item>\r\n\r\n                        </ListGroup>\r\n                    </Card>\r\n                </Col>\r\n            </Row>\r\n        </div>)\r\n}\r\n\r\nexport default Orderscreen","C:\\Users\\supre\\Docs\\GitHub\\ecomm\\src\\Screens\\Paymentscreen.js",[],"C:\\Users\\supre\\Docs\\GitHub\\ecomm\\src\\Screens\\UserEditscreen.js",["196"],"import {useState,useEffect} from 'react'\r\nimport {useDispatch,useSelector} from 'react-redux'\r\nimport Form from 'react-bootstrap/Form'\r\nimport Button from 'react-bootstrap/Button'\r\nimport {Link} from 'react-router-dom'\r\n\r\n//My components\r\nimport FormContainer from '../Components/FormContainer'\r\nimport {getUserDetails,updateUser} from '../Actions/userActions'\r\n\r\nimport Loader from '../Components/Loader'\r\nimport Message from '../Components/Message'\r\nimport { USER_UPDATE_RESET } from '../Constants/userConstants'\r\n\r\nfunction UserEditscreen({match,history}) {\r\n\r\n    const userId = match.params.id\r\n\r\n    const [name,setName] = useState('')\r\n    const [email,setEmail] = useState('')\r\n    const [isAdmin,setAdmin] = useState(false)\r\n\r\n\r\n    const dispatch = useDispatch()\r\n    \r\n    const userDetails = useSelector(state=>state.userDetails)\r\n    const {loading,error,user} = userDetails\r\n\r\n    const userUpdate = useSelector(state=>state.userUpdate)\r\n    const {loading:loadingUpdate,error:errorUpdate,success:successUpdate} = userUpdate\r\n\r\n    useEffect(()=>{\r\n        if (successUpdate) {\r\n            dispatch({type: USER_UPDATE_RESET})\r\n            history.push('/admin/userlist')\r\n        }\r\n        if(!user._id || user._id!== Number(userId)){\r\n            dispatch(getUserDetails(userId))\r\n        } else{\r\n            if(user.name !== name) {\r\n                setName(user.name)\r\n                setEmail(user.email)\r\n                setAdmin(user.isAdmin)\r\n            }\r\n        }\r\n\r\n    },[dispatch,userId,user,successUpdate,history])\r\n\r\n    const handleEdit = (e) => {\r\n        e.preventDefault()\r\n        dispatch(updateUser({_id:user._id,name,email,isAdmin}))\r\n    }\r\n    return(\r\n        <div>\r\n            <Link to=\"/admin/userlist\">\r\n             Go Back\r\n            </Link>\r\n            {loadingUpdate && <Loader />}\r\n            {errorUpdate && <Message variant=\"danger\">{errorUpdate}</Message>}\r\n\r\n            {loading && <Loader />} \r\n            {error && <Message variant=\"danger\">{error}</Message>}   \r\n\r\n            <FormContainer>\r\n            \r\n            <Form onSubmit = {handleEdit}>\r\n                <h2>Edit User</h2>  \r\n                <Form.Group className=\"mb-3\" controlId=\"Name\">\r\n                    <Form.Label>UserName</Form.Label>\r\n                    <Form.Control \r\n                    type=\"text\" \r\n                    placeholder=\"Enter your name\"\r\n                    value = {name}\r\n                    onChange = {(e) => setName(e.target.value)} \r\n                   />\r\n                </Form.Group>\r\n\r\n                <Form.Group className=\"mb-3\" controlId=\"formBasicEmail\">\r\n                    <Form.Label>Email address</Form.Label>\r\n                    <Form.Control \r\n                    type=\"email\" \r\n                    placeholder=\"Enter email\"\r\n                    value = {email}\r\n                    onChange = {(e) => setEmail(e.target.value)}\r\n                    />\r\n                    <Form.Text className=\"text-muted\">\r\n                        Please enter a valid email id \r\n                    </Form.Text>\r\n                </Form.Group>\r\n\r\n                <Form.Group className=\"mb-3\" controlId=\"isadmin\">\r\n                    <Form.Label>Is Admin</Form.Label>\r\n                    <Form.Check \r\n                    type=\"checkbox\" \r\n                    label=\"IsAdmin\"\r\n                    checked = {isAdmin}\r\n                    onChange = {(e) => setAdmin(e.target.checked)}  \r\n                   />\r\n                </Form.Group>\r\n\r\n                <Button variant=\"primary\" \r\n                type=\"submit\" \r\n                onClick= {handleEdit}>\r\n                    Update\r\n                </Button>\r\n            </Form>\r\n            </FormContainer>\r\n       \r\n        </div>\r\n      )\r\n}\r\n\r\nexport default UserEditscreen","C:\\Users\\supre\\Docs\\GitHub\\ecomm\\src\\Screens\\Registerscreen.js",["197","198","199"],"import {useState,useEffect} from 'react'\r\nimport {useDispatch,useSelector} from 'react-redux'\r\nimport Form from 'react-bootstrap/Form'\r\nimport Button from 'react-bootstrap/Button'\r\nimport Row from 'react-bootstrap/Row'\r\nimport Col from 'react-bootstrap/Col'\r\nimport { Link } from 'react-router-dom'\r\n//My components\r\nimport FormContainer from '../Components/FormContainer'\r\nimport {register} from '../Actions/userActions'\r\n\r\nimport Loader from '../Components/Loader'\r\nimport Message from '../Components/Message'\r\n\r\nfunction Registerscreen({location,history}) {\r\n    const [name,setName] = useState()\r\n    const [email,setEmail] = useState()\r\n    const [password,setPassword] = useState()\r\n    const [confirmPassword,setConfirmPassword] = useState()\r\n    const [message,setMessage] = useState()\r\n\r\n    const dispatch = useDispatch()\r\n    \r\n    const userRegister = useSelector(state=>state.userRegister)\r\n    const {loading,error,userInfo} = userRegister\r\n\r\n    useEffect(()=>{\r\n        if(userInfo){\r\n            history.push(\"/\")\r\n        }\r\n    },[userInfo])\r\n\r\n    const handleRegister = (e) => {\r\n        e.preventDefault()\r\n        dispatch(register(name,email,password))\r\n    }\r\n    return(\r\n        <FormContainer>\r\n            {loading && <Loader />}\r\n            {error && <Message variant =\"danger\">{error}</Message>}\r\n            <Form onSubmit = {handleRegister}>\r\n                <h2>Sign-Up</h2>  \r\n                <Form.Group className=\"mb-3\" controlId=\"Name\">\r\n                    <Form.Label>UserName</Form.Label>\r\n                    <Form.Control \r\n                    type=\"text\" \r\n                    placeholder=\"Enter your name\"\r\n                    value = {name}\r\n                    onChange = {(e) => setName(e.target.value)} \r\n                    required />\r\n                </Form.Group>\r\n\r\n                <Form.Group className=\"mb-3\" controlId=\"formBasicEmail\">\r\n                    <Form.Label>Email address</Form.Label>\r\n                    <Form.Control \r\n                    type=\"email\" \r\n                    placeholder=\"Enter email\"\r\n                    value = {email}\r\n                    onChange = {(e) => setEmail(e.target.value)}\r\n                    required />\r\n                    <Form.Text className=\"text-muted\">\r\n                        Please enter a valid email id \r\n                    </Form.Text>\r\n                </Form.Group>\r\n\r\n                <Form.Group className=\"mb-3\" controlId=\"formBasicPassword\">\r\n                    <Form.Label>Password</Form.Label>\r\n                    <Form.Control \r\n                    type=\"password\" \r\n                    placeholder=\"Password\"\r\n                    value = {password}\r\n                    onChange = {(e) => setPassword(e.target.value)}  \r\n                    required/>\r\n                </Form.Group>\r\n\r\n                <Form.Group className=\"mb-3\" controlId=\"formConfirmPassword\">\r\n                    <Form.Label>Confirm Password</Form.Label>\r\n                    <Form.Control \r\n                    type=\"password\" \r\n                    placeholder=\"Confirm Password\"\r\n                    value = {confirmPassword}\r\n                    onChange = {(e) => setConfirmPassword(e.target.value)}  \r\n                    required/>\r\n                </Form.Group>\r\n                {confirmPassword && (password !== confirmPassword) &&\r\n                 <Message variant=\"danger\">Passwords do not match </Message>}\r\n\r\n                <Button variant=\"primary\" \r\n                type=\"submit\" \r\n                disabled = {confirmPassword && (password !== confirmPassword)}\r\n                onClick= {handleRegister}>\r\n                    Submit\r\n                </Button>\r\n            </Form>\r\n            <Row className='py-3'>\r\n                <Col>\r\n                    Alredy have an account? <Link\r\n                        to=\"/login\">\r\n                        Sign-in\r\n                        </Link>\r\n                </Col>\r\n            </Row>\r\n            </FormContainer>\r\n        )\r\n}\r\n\r\nexport default Registerscreen","C:\\Users\\supre\\Docs\\GitHub\\ecomm\\src\\Screens\\ProductListscreen.js",["200","201","202","203","204"],"import {useEffect} from 'react'\r\nimport Table from 'react-bootstrap/Table'\r\nimport Button from 'react-bootstrap/Button'\r\nimport Row from 'react-bootstrap/Row'\r\nimport Col from 'react-bootstrap/Col'\r\nimport { LinkContainer } from 'react-router-bootstrap'\r\nimport {useDispatch,useSelector} from 'react-redux'\r\n\r\n//My components\r\nimport Loader from '../Components/Loader'\r\nimport Message from '../Components/Message'\r\nimport { listProducts,deleteProduct,createProduct } from '../Actions/productActions'\r\nimport {PRODUCT_DELETE_RESET,PRODUCT_CREATE_RESET} from '../Constants/productConstants'\r\n\r\nfunction ProductListscreen ({history}) {\r\n    console.log(\"ProductList\")\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const userLogin = useSelector(state => state.userLogin)\r\n    const {userInfo} = userLogin\r\n\r\n    const productList = useSelector(state => state.productList)\r\n    const {loading,error,products} = productList\r\n\r\n    const productDelete = useSelector(state => state.productDelete)\r\n    const {success:successDelete,loading:loadingDelete,error:errorDelete} = productDelete\r\n\r\n    const productCreate = useSelector(state => state.productCreate)\r\n    const {success:successCreate,loading:loadingCreate,error:errorCreate,product:newProduct} = productCreate\r\n\r\n    console.log(\"successCreate\" + successCreate)\r\n    useEffect(() => {\r\n        dispatch({ type: PRODUCT_CREATE_RESET })\r\n\r\n        if (!userInfo.isAdmin) {\r\n            history.push('/login')\r\n        }\r\n\r\n        if (successCreate) {\r\n            history.push(`/admin/product/${newProduct._id}/edit`)\r\n        } else {\r\n            dispatch(listProducts())\r\n        }\r\n\r\n    }, [dispatch, history, userInfo, successDelete, successCreate, newProduct])\r\n\r\n    function deleteHandler(id,name){\r\n        if(window.confirm(`Delete product : ${name}?`)){\r\n            dispatch(deleteProduct(id))\r\n        }\r\n    }\r\n    function handleCreateProduct(){\r\n        dispatch(createProduct())\r\n    }\r\n\r\n    return loading? (<Loader/>)\r\n                  : error? (<Message variant=\"danger\">{error}</Message>)\r\n                        : (\r\n                            <div>\r\n                            <Row className=\"justify-content-center\">\r\n                                <Col md={10}>\r\n                                 <h1>Products</h1>\r\n                                </Col>\r\n                                <Col className=\"mr-0\" md={2}>\r\n                                    <Button className = \"my-3\" variant=\"primary\" onClick={handleCreateProduct}>\r\n                                    <i className='fas fa-plus'></i> Create Product\r\n                                    </Button>\r\n                                </Col>\r\n\r\n                            </Row>\r\n                            <Table striped bordered hover responsive size=\"sm\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th>ID</th>\r\n                                <th>NAME</th>\r\n                                <th>PRICE</th>\r\n                                <th>CATEGORY</th>\r\n                                <th>BRAND</th>\r\n                                <th>EDIT/DELETE</th>\r\n                            </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                            {products.map(product => (\r\n                                    <tr key={product._id}>\r\n                                        <td>{product._id}</td>\r\n                                        <td>{product.name}</td>\r\n                                        <td>&#8377;{product.price}</td>\r\n                                        <td>{product.category}</td>\r\n                                        <td>{product.brand}</td>\r\n\r\n                                        <td>\r\n                                            <LinkContainer to={`/admin/product/${product._id}/edit`}>\r\n                                                <Button variant='light' className='btn-sm'>\r\n                                                    <i className='fas fa-edit'></i>\r\n                                                </Button>\r\n                                            </LinkContainer>\r\n\r\n                                            <Button variant='danger' className='btn-sm' onClick={() => deleteHandler(product._id,product.name)}>\r\n                                                <i className='fas fa-trash'></i>\r\n                                            </Button>\r\n                                        </td>\r\n                                    </tr>\r\n                                ))}\r\n                                \r\n                            </tbody>\r\n                        </Table>\r\n                    </div>\r\n                    )\r\n    }\r\n        \r\n\r\n\r\nexport default ProductListscreen","C:\\Users\\supre\\Docs\\GitHub\\ecomm\\src\\Screens\\ProductEditscreen.js",["205"],"import {useState,useEffect} from 'react'\r\nimport {useDispatch,useSelector} from 'react-redux'\r\nimport Form from 'react-bootstrap/Form'\r\nimport Button from 'react-bootstrap/Button'\r\nimport {Link} from 'react-router-dom'\r\nimport axios from 'axios'\r\n\r\n//My components\r\nimport FormContainer from '../Components/FormContainer'\r\nimport {listProductDetails,updateProduct} from '../Actions/productActions'\r\n\r\nimport Loader from '../Components/Loader'\r\nimport Message from '../Components/Message'\r\nimport { PRODUCT_UPDATE_RESET } from '../Constants/productConstants'\r\n\r\n\r\nfunction ProductEditscreen({match,history}) {\r\n\r\n    const productId = match.params.id\r\n\r\n    const [name,setName] = useState('')\r\n    const [price,setPrice] = useState(0)\r\n    const [brand,setBrand] = useState('')\r\n    const [category,setCategory] = useState('')\r\n    const [image,setImage] = useState('')\r\n    const [countInStock,setCountInStock] = useState(0)\r\n    const [description,setDescription] = useState('')\r\n    const [uploading,setUploading] = useState(false)\r\n    \r\n    const dispatch = useDispatch()\r\n    \r\n    const productDetails = useSelector(state=>state.productDetails)\r\n    const {loading,error,product:newProduct} = productDetails\r\n\r\n    const productUpdate = useSelector(state=>state.productUpdate)\r\n    const {loading:loadingUpdate,error:errorUpdate,success:successUpdate} = productUpdate\r\n\r\n    useEffect(()=>{\r\n        if(successUpdate) {\r\n            dispatch({type:PRODUCT_UPDATE_RESET})\r\n            history.push(\"/admin/productlist\")\r\n        } else{\r\n            if(!newProduct.name || newProduct._id !== Number(productId)){\r\n                dispatch(listProductDetails(productId))\r\n            } else {\r\n                if(name !== newProduct.name)\r\n                {\r\n                    setName(newProduct.name)\r\n                    setPrice(newProduct.price)\r\n                    setBrand(newProduct.brand)\r\n                    setCategory(newProduct.category)\r\n                    setImage(newProduct.image)\r\n                    setCountInStock(newProduct.countInStock)\r\n                    setDescription(newProduct.description)\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n    },[dispatch,productId,newProduct,successUpdate])\r\n\r\n    const handleEdit = (e) => {\r\n        e.preventDefault()\r\n        dispatch(updateProduct({\r\n            _id:newProduct._id,\r\n            name,\r\n            price,\r\n            brand,\r\n            category,\r\n            image,\r\n            countInStock,\r\n            description}))\r\n    }\r\n    const uploadImage = async(e) => {\r\n        const file = e.target.files[0]\r\n        const formData = new FormData()\r\n\r\n        formData.append('image', file)\r\n        formData.append('product_id', productId)\r\n\r\n        setUploading(true)\r\n\r\n        try {\r\n            const config = {\r\n                headers: {\r\n                    'Content-Type': 'multipart/form-data'\r\n                }\r\n            }\r\n\r\n            const { data } = await axios.post('/api/products/upload/', formData, config)\r\n\r\n\r\n            setImage(data)\r\n            setUploading(false)\r\n\r\n        } catch (error) {\r\n            setUploading(false)\r\n        }\r\n\r\n    }\r\n    return(\r\n        <div>\r\n            <Link to=\"/admin/productlist\">\r\n             Go Back\r\n            </Link>\r\n\r\n            {loading && <Loader />} \r\n            {error && <Message variant=\"danger\">{error}</Message>}  \r\n\r\n\r\n            <FormContainer>\r\n            \r\n            <Form onSubmit = {handleEdit}>\r\n                <h2>Edit Product</h2>  \r\n                {loadingUpdate && <Loader />} \r\n                {errorUpdate && <Message variant=\"danger\">{errorUpdate}</Message>}  \r\n                <Form.Group className=\"mb-3\" controlId=\"name\">\r\n                    <Form.Label>Product Name</Form.Label>\r\n                    <Form.Control \r\n                    type=\"text\" \r\n                    placeholder=\"Enter product name\"\r\n                    value = {name}\r\n                    onChange = {(e) => setName(e.target.value)} \r\n                   />\r\n                </Form.Group>\r\n                <Form.Group className=\"mb-3\" controlId=\"price\">\r\n                    <Form.Label>Price</Form.Label>\r\n                    <Form.Control \r\n                    type=\"number\" \r\n                    placeholder=\"Enter price\"\r\n                    value = {price}\r\n                    onChange = {(e) => setPrice(e.target.value)} \r\n                   />\r\n                </Form.Group>\r\n                {uploading && <Loader />}\r\n                <Form.Group className=\"mb-3\" controlId=\"image\">\r\n                    <Form.Label>Image</Form.Label>\r\n                    <Form.Control \r\n                    type=\"text\" \r\n                    placeholder=\"Enter Image\"\r\n                    value = {image}\r\n                    onChange = {(e) => setImage(e.target.value)} \r\n                   />\r\n                   <Form.Control\r\n                    type =\"file\"\r\n                    controlId=\"image-file\"\r\n                    label=\"Choose file to upload\"\r\n                    custom\r\n                    onChange = {uploadImage}\r\n                   />\r\n                </Form.Group>\r\n                <Form.Group className=\"mb-3\" controlId=\"brand\">\r\n                    <Form.Label>Brand</Form.Label>\r\n                    <Form.Control \r\n                    type=\"text\" \r\n                    placeholder=\"Enter Brand\"\r\n                    value = {brand}\r\n                    onChange = {(e) => setBrand(e.target.value)} \r\n                   />\r\n                </Form.Group>\r\n                <Form.Group className=\"mb-3\" controlId=\"category\">\r\n                    <Form.Label>Category</Form.Label>\r\n                    <Form.Control \r\n                    type=\"text\" \r\n                    placeholder=\"Enter Category\"\r\n                    value = {category}\r\n                    onChange = {(e) => setCategory(e.target.value)} \r\n                   />\r\n                </Form.Group>\r\n                <Form.Group className=\"mb-3\" controlId=\"countinstock\">\r\n                    <Form.Label>Stock Level</Form.Label>\r\n                    <Form.Control \r\n                    type=\"number\" \r\n                    placeholder=\"Enter Stock Level\"\r\n                    value = {countInStock}\r\n                    onChange = {(e) => setCountInStock(e.target.value)} \r\n                   />\r\n                </Form.Group>\r\n                <Form.Group className=\"mb-3\" controlId=\"description\">\r\n                    <Form.Label>Description</Form.Label>\r\n                    <Form.Control \r\n                    type=\"text\" \r\n                    placeholder=\"Enter description\"\r\n                    value = {description}\r\n                    onChange = {(e) => setDescription(e.target.value)} \r\n                   />\r\n                </Form.Group>\r\n                \r\n                \r\n\r\n                <Button variant=\"primary\" \r\n                type=\"submit\" \r\n                onClick= {handleEdit}>\r\n                    Update\r\n                </Button>\r\n            </Form>\r\n            </FormContainer>\r\n       \r\n        </div>\r\n      )\r\n}\r\n\r\nexport default ProductEditscreen","C:\\Users\\supre\\Docs\\GitHub\\ecomm\\src\\Screens\\OrderListscreen.js",["206"],"import React, { useState, useEffect } from 'react'\r\nimport { LinkContainer } from 'react-router-bootstrap'\r\nimport { Table, Button } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport Loader from '../Components/Loader'\r\nimport Message from '../Components/Message'\r\nimport { listOrders } from '../Actions/orderActions'\r\n\r\nfunction OrderListscreen({ history }) {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const orderList = useSelector(state => state.orderList)\r\n    const { loading, error, orders } = orderList\r\n\r\n    const userLogin = useSelector(state => state.userLogin)\r\n    const { userInfo } = userLogin\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        if (userInfo && userInfo.isAdmin) {\r\n            dispatch(listOrders())\r\n        } else {\r\n            history.push('/login')\r\n        }\r\n\r\n    }, [dispatch, history, userInfo])\r\n\r\n\r\n    return (\r\n        <div>\r\n            <h1>Orders</h1>\r\n            {loading\r\n                ? (<Loader />)\r\n                : error\r\n                    ? (<Message variant='danger'>{error}</Message>)\r\n                    : (\r\n                        <Table striped bordered hover responsive className='table-sm'>\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>ID</th>\r\n                                    <th>USER</th>\r\n                                    <th>DATE</th>\r\n                                    <th>Total</th>\r\n                                    <th>PAID</th>\r\n                                    <th>DELIVERED</th>\r\n                                    <th></th>\r\n                                </tr>\r\n                            </thead>\r\n\r\n                            <tbody>\r\n                                {orders.map(order => (\r\n                                    <tr key={order._id}>\r\n                                        <td>{order._id}</td>\r\n                                        <td>{order.user && order.user.name}</td>\r\n                                        <td>{order.createdAt.substring(0, 10)}</td>\r\n                                        <td>&#8377;{order.totalPrice}</td>\r\n\r\n                                        <td>{order.isPaid ? (\r\n                                            order.paidAt.substring(0, 10)\r\n                                        ) : (\r\n                                                <i className='fas fa-check' style={{ color: 'red' }}></i>\r\n                                            )}\r\n                                        </td>\r\n\r\n                                        <td>{order.isDelivered ? (\r\n                                            order.deliveredAt.substring(0, 10)\r\n                                        ) : (\r\n                                                <i className='fas fa-check' style={{ color: 'red' }}></i>\r\n                                            )}\r\n                                        </td>\r\n\r\n                                        <td>\r\n                                            <LinkContainer to={`/order/${order._id}`}>\r\n                                                <Button variant='light'>\r\n                                                    Details\r\n                                                </Button>\r\n                                            </LinkContainer>\r\n\r\n\r\n                                        </td>\r\n                                    </tr>\r\n                                ))}\r\n                            </tbody>\r\n                        </Table>\r\n                    )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default OrderListscreen","C:\\Users\\supre\\Docs\\GitHub\\ecomm\\src\\Components\\Loader.js",[],"C:\\Users\\supre\\Docs\\GitHub\\ecomm\\src\\Components\\Message.js",[],"C:\\Users\\supre\\Docs\\GitHub\\ecomm\\src\\Components\\Product.js",[],"C:\\Users\\supre\\Docs\\GitHub\\ecomm\\src\\Components\\FormContainer.js",[],"C:\\Users\\supre\\Docs\\GitHub\\ecomm\\src\\Components\\Rating.js",[],"C:\\Users\\supre\\Docs\\GitHub\\ecomm\\src\\Constants\\userConstants.js",[],"C:\\Users\\supre\\Docs\\GitHub\\ecomm\\src\\Constants\\productConstants.js",[],"C:\\Users\\supre\\Docs\\GitHub\\ecomm\\src\\Constants\\cartConstants.js",[],"C:\\Users\\supre\\Docs\\GitHub\\ecomm\\src\\Constants\\orderConstants.js",[],"C:\\Users\\supre\\Docs\\GitHub\\ecomm\\src\\Actions\\cartActions.js",["207"],"import axios from 'axios'\r\n\r\n\r\n//constants\r\nimport {\r\n    CART_ADD_ITEM,\r\n    CART_REMOVE_ITEM,\r\n    CART_CLEAR_ITEMS,\r\n\r\n    CART_SAVE_SHIPPING_ADDRESS,\r\n    CART_SAVE_PAYMENT_METHOD,\r\n} from '../Constants/cartConstants'\r\n\r\nexport const addToCart = (id,qty) => async(dispatch,getState) => {\r\n    try{\r\n        const {data} = await axios.get(`/api/products/${id}/`)\r\n        const item  = {\r\n                         product : id,\r\n                         name: data.name,\r\n                         image: data.image,\r\n                         price: data.price,\r\n                         countInStock: data.countInStock,\r\n                         qty\r\n                        }\r\n        dispatch({type: CART_ADD_ITEM, payload:item})\r\n\r\n\r\n    }catch(error){\r\n        console.log(error)\r\n    }\r\n    localStorage.setItem('cartItems', JSON.stringify(getState().cart.cartItems))\r\n}\r\n\r\nexport const removeFromCart = (id) => async(dispatch,getState) => {\r\n   \r\n        dispatch({type: CART_REMOVE_ITEM, payload:id})\r\n    localStorage.setItem('cartItems', JSON.stringify(getState().cart.cartItems))\r\n}\r\n\r\nexport const saveShippingAddress = (shippingAddress) => async(dispatch) => {\r\n   \r\n    dispatch({type: CART_SAVE_SHIPPING_ADDRESS, payload:shippingAddress})\r\nlocalStorage.setItem('shippingAddress', JSON.stringify(shippingAddress))\r\n}\r\n\r\nexport const savePaymentMethod = (paymentMethod) => async(dispatch) => {\r\n   \r\n    dispatch({type: CART_SAVE_PAYMENT_METHOD, payload:paymentMethod})\r\nlocalStorage.setItem('paymentMethod', JSON.stringify(paymentMethod))\r\n}\r\n\r\n","C:\\Users\\supre\\Docs\\GitHub\\ecomm\\src\\Actions\\productActions.js",["208","209"],"import {\r\n    PRODUCT_LIST_REQUEST,\r\n    PRODUCT_LIST_SUCCESS,\r\n    PRODUCT_LIST_FAIL,\r\n\r\n    PRODUCT_DETAILS_REQUEST,\r\n    PRODUCT_DETAILS_SUCCESS,\r\n    PRODUCT_DETAILS_FAIL,\r\n\r\n    PRODUCT_DELETE_REQUEST,\r\n    PRODUCT_DELETE_SUCCESS,\r\n    PRODUCT_DELETE_FAIL,\r\n    PRODUCT_DELETE_RESET,\r\n\r\n    PRODUCT_CREATE_REQUEST,\r\n    PRODUCT_CREATE_SUCCESS,\r\n    PRODUCT_CREATE_FAIL,\r\n\r\n    PRODUCT_UPDATE_REQUEST,\r\n    PRODUCT_UPDATE_SUCCESS,\r\n    PRODUCT_UPDATE_FAIL,\r\n\r\n    PRODUCT_TOP_REQUEST,\r\n    PRODUCT_TOP_SUCCESS,\r\n    PRODUCT_TOP_FAIL,\r\n\r\n\r\n} from '../Constants/productConstants'\r\nimport axios from 'axios'\r\n\r\nexport const listProducts = (keyword = '') => async(dispatch) => {\r\n    try{\r\n        dispatch({type: PRODUCT_LIST_REQUEST})\r\n        const {data} = await axios.get(`/api/products/${keyword}`)\r\n        dispatch({type: PRODUCT_LIST_SUCCESS, payload:data})\r\n\r\n    }catch(error){\r\n        dispatch({type: PRODUCT_LIST_FAIL, \r\n                 payload:error.response&&error.response.data.detail\r\n                         ?error.response.data.detail\r\n                         :error.message})\r\n    }\r\n}\r\n\r\n\r\nexport const listProductDetails = (id) => async(dispatch) => {\r\n    try{\r\n        dispatch({type: PRODUCT_DETAILS_REQUEST})\r\n        const {data} = await axios.get(`/api/products/${id}/`)\r\n        dispatch({type: PRODUCT_DETAILS_SUCCESS, payload:data})\r\n\r\n    }catch(error){\r\n        dispatch({type: PRODUCT_DETAILS_FAIL, \r\n                payload:error.response&&error.response.data.detail\r\n                        ?error.response.data.detail\r\n                        :error.message})\r\n    }\r\n}\r\n\r\nexport const deleteProduct = (id) => async(dispatch,getState) => {\r\n    try{\r\n        const {userLogin} = getState()\r\n        const {userInfo} = userLogin\r\n\r\n        const config = {\r\n            headers:{'Content-type' :'Application/json',\r\n                     Authorization: 'Bearer '+userInfo.token\r\n                    }\r\n\r\n        }\r\n        dispatch({type:PRODUCT_DELETE_REQUEST})\r\n\r\n        const {data} = await axios.delete(`/api/products/delete/${id}/`,\r\n                        config)\r\n\r\n        dispatch({type: PRODUCT_DELETE_SUCCESS})\r\n  \r\n    }catch(error) {\r\n        dispatch({type: PRODUCT_DELETE_FAIL, \r\n            payload:error.response&&error.response.data.detail\r\n                    ?error.response.data.detail\r\n                    :error.message})     \r\n    }\r\n}\r\n\r\nexport const createProduct = () => async(dispatch,getState) => {\r\n    try{\r\n        const {userLogin} = getState()\r\n        const {userInfo} = userLogin\r\n\r\n        const config = {\r\n            headers:{'Content-type' :'Application/json',\r\n                     Authorization: 'Bearer '+userInfo.token\r\n                    }\r\n\r\n        }\r\n        dispatch({type:PRODUCT_CREATE_REQUEST})\r\n\r\n        const {data} = await axios.post(`/api/products/create/`,\r\n                        {},\r\n                        config)\r\n\r\n        dispatch({type: PRODUCT_CREATE_SUCCESS, payload:data})\r\n  \r\n    }catch(error) {\r\n        dispatch({type: PRODUCT_CREATE_FAIL, \r\n            payload:error.response&&error.response.data.detail\r\n                    ?error.response.data.detail\r\n                    :error.message})     \r\n    }\r\n}\r\n\r\nexport const updateProduct = (product) => async(dispatch,getState) => {\r\n    try{\r\n        const {userLogin} = getState()\r\n        const {userInfo} = userLogin\r\n\r\n        const config = {\r\n            headers:{'Content-type' :'Application/json',\r\n                     Authorization: 'Bearer '+userInfo.token\r\n                    }\r\n\r\n        }\r\n        dispatch({type:PRODUCT_UPDATE_REQUEST})\r\n\r\n        const {data} = await axios.put(`/api/products/update/${product._id}/`,\r\n                        product,\r\n                        config)\r\n\r\n        dispatch({type: PRODUCT_UPDATE_SUCCESS, payload:data})\r\n\r\n        dispatch({type:PRODUCT_DETAILS_SUCCESS, payload:data})\r\n  \r\n    }catch(error) {\r\n        dispatch({type: PRODUCT_UPDATE_FAIL, \r\n            payload:error.response&&error.response.data.detail\r\n                    ?error.response.data.detail\r\n                    :error.message})     \r\n    }\r\n}\r\n\r\nexport const listTopProducts = () => async(dispatch) => {\r\n    try{\r\n        dispatch({type: PRODUCT_TOP_REQUEST})\r\n        const {data} = await axios.get(`/api/products/top/`)\r\n        dispatch({type: PRODUCT_TOP_SUCCESS, payload:data})\r\n\r\n    }catch(error){\r\n        dispatch({type: PRODUCT_TOP_FAIL, \r\n                 payload:error.response&&error.response.data.detail\r\n                         ?error.response.data.detail\r\n                         :error.message})\r\n    }\r\n}","C:\\Users\\supre\\Docs\\GitHub\\ecomm\\src\\Actions\\orderActions.js",["210","211"],"import {\r\n    ORDER_CREATE_REQUEST,\r\n    ORDER_CREATE_SUCCESS,\r\n    ORDER_CREATE_FAIL,\r\n    ORDER_CREATE_RESET,\r\n\r\n    ORDER_DETAILS_REQUEST,\r\n    ORDER_DETAILS_SUCCESS,\r\n    ORDER_DETAILS_FAIL,\r\n\r\n    ORDER_LIST_MY_REQUEST,\r\n    ORDER_LIST_MY_SUCCESS,\r\n    ORDER_LIST_MY_FAIL,\r\n    ORDER_LIST_MY_RESET,\r\n\r\n    ORDER_LIST_REQUEST,\r\n    ORDER_LIST_SUCCESS,\r\n    ORDER_LIST_FAIL,\r\n\r\n} from '../Constants/orderConstants'\r\n\r\nimport {CART_CLEAR_ITEMS} from '../Constants/cartConstants'\r\n\r\nimport axios from 'axios'\r\n\r\nexport const createOrder = (order) => async(dispatch,getState)=>{\r\n    try{\r\n        const {userLogin} = getState()\r\n        const {userInfo} = userLogin\r\n\r\n        const config = {\r\n            headers:{'Content-type' :'Application/json',\r\n                     Authorization: 'Bearer '+userInfo.token\r\n                    }\r\n\r\n        }\r\n        dispatch({type:ORDER_CREATE_REQUEST})\r\n\r\n        const {data} = await axios.post(`/api/orders/add/`,\r\n                        order,\r\n                        config)\r\n\r\n        dispatch({type: ORDER_CREATE_SUCCESS, payload:data})\r\n        dispatch({\r\n            type: CART_CLEAR_ITEMS,\r\n            payload: data\r\n        })\r\n        localStorage.removeItem('cartItems')\r\n  \r\n    }catch(error) {\r\n        dispatch({type: ORDER_CREATE_FAIL, \r\n            payload:error.response&&error.response.data.detail\r\n                    ?error.response.data.detail\r\n                    :error.message})     \r\n    }\r\n\r\n}\r\n\r\nexport const getOrderDetails = (id) => async(dispatch,getState) => {\r\n    try{\r\n        const {userLogin} = getState()\r\n        const {userInfo} = userLogin\r\n\r\n        const config = {\r\n            headers:{'Content-type' :'Application/json',\r\n                     Authorization: 'Bearer '+userInfo.token\r\n                    }\r\n\r\n        }\r\n        dispatch({type:ORDER_DETAILS_REQUEST})\r\n\r\n        const {data} = await axios.get(`/api/orders/${id}/`,\r\n                        config)\r\n\r\n        dispatch({type: ORDER_DETAILS_SUCCESS, payload:data})\r\n \r\n  \r\n    }catch(error) {\r\n        dispatch({type: ORDER_DETAILS_FAIL, \r\n            payload:error.response&&error.response.data.detail\r\n                    ?error.response.data.detail\r\n                    :error.message})     \r\n    }\r\n\r\n}\r\n\r\nexport const listMyOrders = () => async(dispatch,getState) => {\r\n    try{\r\n        const {userLogin} = getState()\r\n        const {userInfo} = userLogin\r\n\r\n        const config = {\r\n            headers:{'Content-type' :'Application/json',\r\n                     Authorization: 'Bearer '+userInfo.token\r\n                    }\r\n\r\n        }\r\n        dispatch({type:ORDER_LIST_MY_REQUEST})\r\n\r\n        const {data} = await axios.get(`/api/orders/myorders/`,\r\n                        config)\r\n\r\n        dispatch({type: ORDER_LIST_MY_SUCCESS, payload:data})\r\n \r\n  \r\n    }catch(error) {\r\n        dispatch({type: ORDER_LIST_MY_FAIL, \r\n            payload:error.response&&error.response.data.detail\r\n                    ?error.response.data.detail\r\n                    :error.message})     \r\n    }\r\n\r\n}\r\n\r\n\r\n\r\nexport const listOrders = () => async(dispatch,getState) => {\r\n    try{\r\n        const {userLogin} = getState()\r\n        const {userInfo} = userLogin\r\n\r\n        const config = {\r\n            headers:{'Content-type' :'Application/json',\r\n                     Authorization: 'Bearer '+userInfo.token\r\n                    }\r\n\r\n        }\r\n        dispatch({type:ORDER_LIST_REQUEST})\r\n\r\n        const {data} = await axios.get(`/api/orders/`,\r\n                        config)\r\n\r\n        dispatch({type: ORDER_LIST_SUCCESS, payload:data})\r\n \r\n  \r\n    }catch(error) {\r\n        dispatch({type: ORDER_LIST_FAIL, \r\n            payload:error.response&&error.response.data.detail\r\n                    ?error.response.data.detail\r\n                    :error.message})     \r\n    }\r\n\r\n}","C:\\Users\\supre\\Docs\\GitHub\\ecomm\\src\\Actions\\userActions.js",["212","213","214","215"],"import axios from 'axios'\r\nimport { CART_CLEAR_ITEMS } from '../Constants/cartConstants'\r\nimport {ORDER_LIST_MY_RESET} from '../Constants/orderConstants'\r\n\r\nimport {\r\n    USER_LOGIN_REQUEST,\r\n    USER_LOGIN_SUCCESS,\r\n    USER_LOGIN_FAIL,\r\n\r\n    USER_LOGOUT,\r\n\r\n    USER_REGISTER_REQUEST,\r\n    USER_REGISTER_SUCCESS,\r\n    USER_REGISTER_FAIL,\r\n\r\n    USER_DETAILS_REQUEST,\r\n    USER_DETAILS_SUCCESS,\r\n    USER_DETAILS_FAIL,\r\n    USER_DETAILS_RESET,\r\n\r\n    USER_UPDATE_PROFILE_REQUEST,\r\n    USER_UPDATE_PROFILE_SUCCESS,\r\n    USER_UPDATE_PROFILE_FAIL,\r\n    USER_UPDATE_PROFILE_RESET,\r\n\r\n    USER_LIST_REQUEST,\r\n    USER_LIST_SUCCESS,\r\n    USER_LIST_FAIL,\r\n    USER_LIST_RESET,\r\n\r\n    USER_DELETE_REQUEST,\r\n    USER_DELETE_SUCCESS,\r\n    USER_DELETE_FAIL,\r\n\r\n    USER_UPDATE_REQUEST,\r\n    USER_UPDATE_SUCCESS,\r\n    USER_UPDATE_FAIL,\r\n} from '../Constants/userConstants'\r\n\r\n\r\nexport const login = (email,password) => async(dispatch) => {\r\n    try{\r\n        const config = {\r\n            headers:{'Content-type' :'Application/json'}\r\n        }\r\n        dispatch({type:USER_LOGIN_REQUEST})\r\n\r\n        const {data} = await axios.post('/api/users/login/',\r\n                        {'username':email,'password':password},\r\n                        config)\r\n        dispatch({type: USER_LOGIN_SUCCESS, payload:data})\r\n        localStorage.setItem('userInfo',JSON.stringify(data))\r\n    }catch(error) {\r\n        dispatch({type: USER_LOGIN_FAIL, \r\n            payload:error.response&&error.response.data.detail\r\n                    ?error.response.data.detail\r\n                    :error.message})     \r\n    }\r\n}\r\n\r\nexport const logout = () =>(dispatch) =>{\r\n    localStorage.removeItem('userInfo')\r\n    dispatch({type: USER_LOGOUT})\r\n    dispatch({type: USER_DETAILS_RESET})\r\n    dispatch({type: CART_CLEAR_ITEMS})\r\n    dispatch({type: ORDER_LIST_MY_RESET})\r\n}\r\n\r\nexport const register = (name,email,password) => async(dispatch) => {\r\n    try{\r\n        const config = {\r\n            headers:{'Content-type' :'Application/json'}\r\n        }\r\n        dispatch({type:USER_REGISTER_REQUEST})\r\n\r\n        const {data} = await axios.post('/api/users/register/',\r\n                        {'name':name,'email':email,'password':password},\r\n                        config)\r\n        dispatch({type: USER_REGISTER_SUCCESS, payload:data})\r\n        dispatch({type: USER_LOGIN_SUCCESS, payload:data})\r\n        localStorage.setItem('userInfo',JSON.stringify(data))\r\n    }catch(error) {\r\n        dispatch({type: USER_REGISTER_FAIL, \r\n            payload:error.response&&error.response.data.detail\r\n                    ?error.response.data.detail\r\n                    :error.message})     \r\n    }\r\n}\r\n\r\nexport const getUserDetails = (id) => async(dispatch,getState) => {\r\n    try{\r\n        const {userLogin} = getState()\r\n        const {userInfo} = userLogin\r\n\r\n        const config = {\r\n            headers:{'Content-type' :'Application/json',\r\n                     Authorization: 'Bearer '+userInfo.token\r\n                    }\r\n\r\n        }\r\n        dispatch({type:USER_DETAILS_REQUEST})\r\n\r\n        const {data} = await axios.get(`/api/users/${id}/`,\r\n                        config)\r\n\r\n        dispatch({type: USER_DETAILS_SUCCESS, payload:data})\r\n  \r\n    }catch(error) {\r\n        dispatch({type: USER_DETAILS_FAIL, \r\n            payload:error.response&&error.response.data.detail\r\n                    ?error.response.data.detail\r\n                    :error.message})     \r\n    }\r\n}\r\n\r\nexport const updateUserProfile = (user) => async(dispatch,getState) => {\r\n    try{\r\n        const {userLogin} = getState()\r\n        const {userInfo} = userLogin\r\n        console.log(userInfo)\r\n        const config = {\r\n            headers:{'Content-type' :'Application/json',\r\n                     Authorization: 'Bearer '+userInfo.token\r\n                    }\r\n        }\r\n\r\n        dispatch({type:USER_UPDATE_PROFILE_REQUEST})\r\n\r\n        const {data} = await axios.put(`/api/users/profile/update/`,user,\r\n                        config)\r\n\r\n        dispatch({type: USER_UPDATE_PROFILE_SUCCESS, payload:data})\r\n        dispatch({type: USER_LOGIN_SUCCESS,payload:data})\r\n        localStorage.setItem('userInfo', JSON.stringify(data))\r\n  \r\n        }catch(error) {\r\n        dispatch({type: USER_UPDATE_PROFILE_FAIL, \r\n            payload:error.response&&error.response.data.detail\r\n                    ?error.response.data.detail\r\n                    :error.message})     \r\n    }\r\n}\r\n\r\nexport const getUserList = () => async(dispatch,getState) => {\r\n    try{\r\n        const {userLogin} = getState()\r\n        const {userInfo} = userLogin\r\n\r\n        const config = {\r\n            headers:{'Content-type' :'Application/json',\r\n                     Authorization: 'Bearer '+userInfo.token\r\n                    }\r\n\r\n        }\r\n        dispatch({type:USER_LIST_REQUEST})\r\n\r\n        const {data} = await axios.get(`/api/users/`,\r\n                        config)\r\n\r\n        dispatch({type: USER_LIST_SUCCESS, payload:data})\r\n  \r\n    }catch(error) {\r\n        dispatch({type: USER_LIST_FAIL, \r\n            payload:error.response&&error.response.data.detail\r\n                    ?error.response.data.detail\r\n                    :error.message})     \r\n    }\r\n}\r\n\r\nexport const deleteUser = (id) => async(dispatch,getState) => {\r\n    try{\r\n        const {userLogin} = getState()\r\n        const {userInfo} = userLogin\r\n\r\n        const config = {\r\n            headers:{'Content-type' :'Application/json',\r\n                     Authorization: 'Bearer '+userInfo.token\r\n                    }\r\n\r\n        }\r\n        dispatch({type:USER_DELETE_REQUEST})\r\n\r\n        const {data} = await axios.delete(`/api/users/delete/${id}/`,\r\n                        config)\r\n\r\n        dispatch({type: USER_DELETE_SUCCESS})\r\n  \r\n    }catch(error) {\r\n        dispatch({type: USER_DELETE_FAIL, \r\n            payload:error.response&&error.response.data.detail\r\n                    ?error.response.data.detail\r\n                    :error.message})     \r\n    }\r\n}\r\n\r\nexport const updateUser = (user) => async(dispatch,getState) => {\r\n    try{\r\n        const {userLogin} = getState()\r\n        const {userInfo} = userLogin\r\n\r\n        const config = {\r\n            headers:{'Content-type' :'Application/json',\r\n                     Authorization: 'Bearer '+userInfo.token\r\n                    }\r\n\r\n        }\r\n        dispatch({type:USER_UPDATE_REQUEST})\r\n\r\n        const {data} = await axios.put(`/api/users/update/${user._id}/`,\r\n                        user,\r\n                        config)\r\n\r\n        dispatch({type: USER_UPDATE_SUCCESS})\r\n  \r\n    }catch(error) {\r\n        dispatch({type: USER_UPDATE_FAIL, \r\n            payload:error.response&&error.response.data.detail\r\n                    ?error.response.data.detail\r\n                    :error.message})     \r\n    }\r\n}","C:\\Users\\supre\\Docs\\GitHub\\ecomm\\src\\Components\\CheckoutSteps.js",[],"C:\\Users\\supre\\Docs\\GitHub\\ecomm\\src\\Components\\SearchBox.js",["216"],"import {Button,Form,FormControl} from 'react-bootstrap'\r\nimport {useState} from 'react'\r\nimport {useHistory} from 'react-router-dom'\r\n\r\nfunction SearchBox() {\r\n    let history= useHistory()\r\n    const [keyword,setKeyword] = useState('')\r\n\r\n    const handleSubmit = (e) =>{\r\n        e.preventDefault()\r\n        if(keyword){\r\n            history.push(`/?keyword=${keyword}`)\r\n        }else{\r\n            history.push(history.push(history.location.pathname))\r\n        }\r\n    }\r\n    return(\r\n        <Form onSubmit={handleSubmit} className=\"d-flex\">\r\n            <Form.Control\r\n                type=\"search\"\r\n                placeholder=\"Search\"\r\n                className=\"mr-5\"\r\n                name=\"q\"\r\n                aria-label=\"Search\"\r\n                value={keyword}\r\n                onChange = {(e)=> setKeyword(e.target.value)}\r\n            />\r\n            <Button variant=\"outline-success\" className=\"p-2\" onClick={handleSubmit}>Search</Button>\r\n    </Form>\r\n\r\n    )\r\n\r\n}\r\n\r\nexport default SearchBox","C:\\Users\\supre\\Docs\\GitHub\\ecomm\\src\\Components\\Advertisement.js",["217","218","219"],"import {useEffect} from 'react'\r\nimport {useDispatch,useSelector} from 'react-redux'\r\nimport Carousel from 'react-bootstrap/Carousel'\r\nimport Image from 'react-bootstrap/Image'\r\n\r\nfunction Advertisement() {\r\n return(\r\n    <Carousel>\r\n        <Carousel.Item>\r\n        <Image\r\n            className=\"d-block w-100\"\r\n            src=\"https://cdn.pixabay.com/photo/2015/04/23/22/00/tree-736885__480.jpg\"\r\n            alt=\"First slide\"\r\n            fluid\r\n        />\r\n        <Carousel.Caption>\r\n            <h3>First slide label</h3>\r\n            <p>Nulla vitae elit libero, a pharetra augue mollis interdum.</p>\r\n        </Carousel.Caption>\r\n        </Carousel.Item>\r\n        <Carousel.Item>\r\n        <Image\r\n            className=\"d-block w-100\"\r\n            src=\"https://cdn.pixabay.com/photo/2015/04/23/22/00/tree-736885__480.jpg\"\r\n            alt=\"First slide\"\r\n            fluid\r\n        />\r\n        <Carousel.Caption>\r\n            <h3>Second slide label</h3>\r\n            <p>Nulla vitae elit libero, a pharetra augue mollis interdum.</p>\r\n        </Carousel.Caption>\r\n        </Carousel.Item>\r\n    </Carousel>\r\n )\r\n}\r\n\r\nexport default Advertisement",{"ruleId":"220","replacedBy":"221"},{"ruleId":"222","replacedBy":"223"},{"ruleId":"224","severity":1,"message":"225","line":4,"column":10,"nodeType":"226","messageId":"227","endLine":4,"endColumn":18},{"ruleId":"224","severity":1,"message":"228","line":3,"column":33,"nodeType":"226","messageId":"227","endLine":3,"endColumn":37},{"ruleId":"229","severity":1,"message":"230","line":27,"column":22,"nodeType":"231","endLine":27,"endColumn":72},{"ruleId":"229","severity":1,"message":"232","line":28,"column":23,"nodeType":"231","endLine":28,"endColumn":97},{"ruleId":"224","severity":1,"message":"233","line":10,"column":14,"nodeType":"226","messageId":"227","endLine":10,"endColumn":18},{"ruleId":"224","severity":1,"message":"234","line":1,"column":8,"nodeType":"226","messageId":"227","endLine":1,"endColumn":13},{"ruleId":"224","severity":1,"message":"225","line":1,"column":26,"nodeType":"226","messageId":"227","endLine":1,"endColumn":34},{"ruleId":"224","severity":1,"message":"235","line":8,"column":10,"nodeType":"226","messageId":"227","endLine":8,"endColumn":28},{"ruleId":"229","severity":1,"message":"236","line":37,"column":8,"nodeType":"237","endLine":37,"endColumn":26,"suggestions":"238"},{"ruleId":"224","severity":1,"message":"239","line":2,"column":10,"nodeType":"226","messageId":"227","endLine":2,"endColumn":16},{"ruleId":"229","severity":1,"message":"240","line":47,"column":7,"nodeType":"237","endLine":47,"endColumn":51,"suggestions":"241"},{"ruleId":"224","severity":1,"message":"242","line":20,"column":12,"nodeType":"226","messageId":"227","endLine":20,"endColumn":19},{"ruleId":"224","severity":1,"message":"243","line":20,"column":20,"nodeType":"226","messageId":"227","endLine":20,"endColumn":30},{"ruleId":"229","severity":1,"message":"244","line":31,"column":7,"nodeType":"237","endLine":31,"endColumn":17,"suggestions":"245"},{"ruleId":"224","severity":1,"message":"246","line":13,"column":9,"nodeType":"226","messageId":"227","endLine":13,"endColumn":29},{"ruleId":"224","severity":1,"message":"247","line":27,"column":42,"nodeType":"226","messageId":"227","endLine":27,"endColumn":55},{"ruleId":"224","severity":1,"message":"248","line":27,"column":62,"nodeType":"226","messageId":"227","endLine":27,"endColumn":73},{"ruleId":"224","severity":1,"message":"249","line":30,"column":42,"nodeType":"226","messageId":"227","endLine":30,"endColumn":55},{"ruleId":"224","severity":1,"message":"250","line":30,"column":62,"nodeType":"226","messageId":"227","endLine":30,"endColumn":73},{"ruleId":"229","severity":1,"message":"251","line":60,"column":7,"nodeType":"237","endLine":60,"endColumn":52,"suggestions":"252"},{"ruleId":"224","severity":1,"message":"225","line":1,"column":17,"nodeType":"226","messageId":"227","endLine":1,"endColumn":25},{"ruleId":"224","severity":1,"message":"253","line":8,"column":5,"nodeType":"226","messageId":"227","endLine":8,"endColumn":21},{"ruleId":"224","severity":1,"message":"246","line":13,"column":5,"nodeType":"226","messageId":"227","endLine":13,"endColumn":25},{"ruleId":"224","severity":1,"message":"254","line":73,"column":16,"nodeType":"226","messageId":"227","endLine":73,"endColumn":20},{"ruleId":"224","severity":1,"message":"235","line":5,"column":5,"nodeType":"226","messageId":"227","endLine":5,"endColumn":23},{"ruleId":"224","severity":1,"message":"255","line":14,"column":5,"nodeType":"226","messageId":"227","endLine":14,"endColumn":24},{"ruleId":"224","severity":1,"message":"256","line":24,"column":5,"nodeType":"226","messageId":"227","endLine":24,"endColumn":30},{"ruleId":"224","severity":1,"message":"257","line":29,"column":5,"nodeType":"226","messageId":"227","endLine":29,"endColumn":20},{"ruleId":"224","severity":1,"message":"254","line":183,"column":16,"nodeType":"226","messageId":"227","endLine":183,"endColumn":20},{"ruleId":"224","severity":1,"message":"254","line":209,"column":16,"nodeType":"226","messageId":"227","endLine":209,"endColumn":20},{"ruleId":"224","severity":1,"message":"258","line":1,"column":21,"nodeType":"226","messageId":"227","endLine":1,"endColumn":32},{"ruleId":"224","severity":1,"message":"259","line":1,"column":9,"nodeType":"226","messageId":"227","endLine":1,"endColumn":18},{"ruleId":"224","severity":1,"message":"260","line":2,"column":9,"nodeType":"226","messageId":"227","endLine":2,"endColumn":20},{"ruleId":"224","severity":1,"message":"261","line":2,"column":21,"nodeType":"226","messageId":"227","endLine":2,"endColumn":32},"no-native-reassign",["262"],"no-negated-in-lhs",["263"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'Form' is defined but never used.","react-hooks/exhaustive-deps","Assignments to the 'totalItems' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","CallExpression","Assignments to the 'totalAmount' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","'Link' is defined but never used.","'react' is defined but never used.","'ORDER_CREATE_RESET' is defined but never used.","React Hook useEffect has a missing dependency: 'order._id'. Either include it or remove the dependency array.","ArrayExpression",["264"],"'Button' is defined but never used.","React Hook useEffect has a missing dependency: 'name'. Either include it or remove the dependency array.",["265"],"'message' is assigned a value but never used.","'setMessage' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.",["266"],"'PRODUCT_DELETE_RESET' is defined but never used.","'loadingDelete' is assigned a value but never used.","'errorDelete' is assigned a value but never used.","'loadingCreate' is assigned a value but never used.","'errorCreate' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'history' and 'name'. Either include them or remove the dependency array.",["267"],"'CART_CLEAR_ITEMS' is defined but never used.","'data' is assigned a value but never used.","'ORDER_LIST_MY_RESET' is defined but never used.","'USER_UPDATE_PROFILE_RESET' is defined but never used.","'USER_LIST_RESET' is defined but never used.","'FormControl' is defined but never used.","'useEffect' is defined but never used.","'useDispatch' is defined but never used.","'useSelector' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"268","fix":"269"},{"desc":"270","fix":"271"},{"desc":"272","fix":"273"},{"desc":"274","fix":"275"},"Update the dependencies array to be: [success, history, order._id]",{"range":"276","text":"277"},"Update the dependencies array to be: [dispatch, userId, user, successUpdate, history, name]",{"range":"278","text":"279"},"Update the dependencies array to be: [history, userInfo]",{"range":"280","text":"281"},"Update the dependencies array to be: [dispatch, productId, newProduct, successUpdate, history, name]",{"range":"282","text":"283"},[1339,1357],"[success, history, order._id]",[1501,1545],"[dispatch, userId, user, successUpdate, history, name]",[1049,1059],"[history, userInfo]",[2184,2229],"[dispatch, productId, newProduct, successUpdate, history, name]"]