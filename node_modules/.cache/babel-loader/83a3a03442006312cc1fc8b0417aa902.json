{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\supre\\\\Documents\\\\ecomm\\\\src\\\\Screens\\\\UserEditscreen.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport { Link } from 'react-router-dom'; //My components\n\nimport FormContainer from '../Components/FormContainer';\nimport { getUserDetails, updateUser } from '../Actions/userActions';\nimport Loader from '../Components/Loader';\nimport Message from '../Components/Message';\nimport { USER_UPDATE_RESET } from '../Constants/userConstants';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction UserEditscreen({\n  match,\n  history\n}) {\n  _s();\n\n  const userId = match.params.id;\n  const [name, setName] = useState();\n  const [email, setEmail] = useState();\n  const [isAdmin, setAdmin] = useState(false);\n  const dispatch = useDispatch();\n  const userDetails = useSelector(state => state.userDetails);\n  const {\n    loading,\n    error,\n    user\n  } = userDetails;\n  const userUpdate = useSelector(state => state.userUpdate);\n  const {\n    loading: loadingUpdate,\n    error: errorUpdate,\n    success: successUpdate\n  } = userUpdate;\n  useEffect(() => {\n    if (successUpdate) {\n      dispatch({\n        type: USER_UPDATE_RESET\n      });\n      history.push('/admin/userlist');\n    }\n\n    if (!user._id || user._id !== Number(userId)) {\n      dispatch(getUserDetails(userId));\n    } else {\n      setName(user.name);\n      setEmail(user.email);\n      setAdmin(user.isAdmin);\n    }\n  }, [dispatch, userId, user, successUpdate]);\n\n  const handleEdit = e => {\n    e.preventDefault();\n    dispatch(updateUser({\n      _id: user._id,\n      name,\n      email,\n      isAdmin\n    }));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Link, {\n      to: \"/admin/userlist\",\n      children: \"Go Back\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this), loadingUpdate && /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 31\n    }, this), errorUpdate && /*#__PURE__*/_jsxDEV(Message, {\n      variant: \"danger\",\n      children: errorUpdate\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 29\n    }, this), loading && /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 25\n    }, this), error && /*#__PURE__*/_jsxDEV(Message, {\n      variant: \"danger\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 23\n    }, this), /*#__PURE__*/_jsxDEV(FormContainer, {\n      children: /*#__PURE__*/_jsxDEV(Form, {\n        onSubmit: handleEdit,\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Edit User\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n          className: \"mb-3\",\n          controlId: \"Name\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"UserName\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            type: \"text\",\n            placeholder: \"Enter your name\",\n            value: name,\n            onChange: e => setName(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n          className: \"mb-3\",\n          controlId: \"formBasicEmail\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"Email address\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            type: \"email\",\n            placeholder: \"Enter email\",\n            value: email,\n            onChange: e => setEmail(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Form.Text, {\n            className: \"text-muted\",\n            children: \"Please enter a valid email id\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n          className: \"mb-3\",\n          controlId: \"isadmin\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"Is Admin\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Form.Check, {\n            type: \"checkbox\",\n            label: \"IsAdmin\",\n            checked: isAdmin,\n            onChange: e => setAdmin(e.target.checked)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"primary\",\n          type: \"submit\",\n          onClick: handleEdit,\n          children: \"Update\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 9\n  }, this);\n}\n\n_s(UserEditscreen, \"vnvWxo/6pN2wGEg0w7kiLWqg9EU=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = UserEditscreen;\nexport default UserEditscreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"UserEditscreen\");","map":{"version":3,"sources":["C:/Users/supre/Documents/ecomm/src/Screens/UserEditscreen.js"],"names":["useState","useEffect","useDispatch","useSelector","Form","Button","Link","FormContainer","getUserDetails","updateUser","Loader","Message","USER_UPDATE_RESET","UserEditscreen","match","history","userId","params","id","name","setName","email","setEmail","isAdmin","setAdmin","dispatch","userDetails","state","loading","error","user","userUpdate","loadingUpdate","errorUpdate","success","successUpdate","type","push","_id","Number","handleEdit","e","preventDefault","target","value","checked"],"mappings":"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","sourcesContent":["import {useState,useEffect} from 'react'\r\nimport {useDispatch,useSelector} from 'react-redux'\r\nimport Form from 'react-bootstrap/Form'\r\nimport Button from 'react-bootstrap/Button'\r\nimport {Link} from 'react-router-dom'\r\n\r\n//My components\r\nimport FormContainer from '../Components/FormContainer'\r\nimport {getUserDetails,updateUser} from '../Actions/userActions'\r\n\r\nimport Loader from '../Components/Loader'\r\nimport Message from '../Components/Message'\r\nimport { USER_UPDATE_RESET } from '../Constants/userConstants'\r\n\r\nfunction UserEditscreen({match,history}) {\r\n\r\n    const userId = match.params.id\r\n\r\n    const [name,setName] = useState()\r\n    const [email,setEmail] = useState()\r\n    const [isAdmin,setAdmin] = useState(false)\r\n\r\n\r\n    const dispatch = useDispatch()\r\n    \r\n    const userDetails = useSelector(state=>state.userDetails)\r\n    const {loading,error,user} = userDetails\r\n\r\n    const userUpdate = useSelector(state=>state.userUpdate)\r\n    const {loading:loadingUpdate,error:errorUpdate,success:successUpdate} = userUpdate\r\n\r\n    useEffect(()=>{\r\n        if (successUpdate) {\r\n            dispatch({type: USER_UPDATE_RESET})\r\n            history.push('/admin/userlist')\r\n        }\r\n        if(!user._id || user._id!== Number(userId)){\r\n            dispatch(getUserDetails(userId))\r\n        } else{\r\n            setName(user.name)\r\n            setEmail(user.email)\r\n            setAdmin(user.isAdmin)\r\n        }\r\n\r\n    },[dispatch,userId,user,successUpdate])\r\n\r\n    const handleEdit = (e) => {\r\n        e.preventDefault()\r\n        dispatch(updateUser({_id:user._id,name,email,isAdmin}))\r\n    }\r\n    return(\r\n        <div>\r\n            <Link to=\"/admin/userlist\">\r\n             Go Back\r\n            </Link>\r\n            {loadingUpdate && <Loader />}\r\n            {errorUpdate && <Message variant=\"danger\">{errorUpdate}</Message>}\r\n\r\n            {loading && <Loader />} \r\n            {error && <Message variant=\"danger\">{error}</Message>}   \r\n\r\n            <FormContainer>\r\n            \r\n            <Form onSubmit = {handleEdit}>\r\n                <h2>Edit User</h2>  \r\n                <Form.Group className=\"mb-3\" controlId=\"Name\">\r\n                    <Form.Label>UserName</Form.Label>\r\n                    <Form.Control \r\n                    type=\"text\" \r\n                    placeholder=\"Enter your name\"\r\n                    value = {name}\r\n                    onChange = {(e) => setName(e.target.value)} \r\n                   />\r\n                </Form.Group>\r\n\r\n                <Form.Group className=\"mb-3\" controlId=\"formBasicEmail\">\r\n                    <Form.Label>Email address</Form.Label>\r\n                    <Form.Control \r\n                    type=\"email\" \r\n                    placeholder=\"Enter email\"\r\n                    value = {email}\r\n                    onChange = {(e) => setEmail(e.target.value)}\r\n                    />\r\n                    <Form.Text className=\"text-muted\">\r\n                        Please enter a valid email id \r\n                    </Form.Text>\r\n                </Form.Group>\r\n\r\n                <Form.Group className=\"mb-3\" controlId=\"isadmin\">\r\n                    <Form.Label>Is Admin</Form.Label>\r\n                    <Form.Check \r\n                    type=\"checkbox\" \r\n                    label=\"IsAdmin\"\r\n                    checked = {isAdmin}\r\n                    onChange = {(e) => setAdmin(e.target.checked)}  \r\n                   />\r\n                </Form.Group>\r\n\r\n                <Button variant=\"primary\" \r\n                type=\"submit\" \r\n                onClick= {handleEdit}>\r\n                    Update\r\n                </Button>\r\n            </Form>\r\n            </FormContainer>\r\n       \r\n        </div>\r\n      )\r\n}\r\n\r\nexport default UserEditscreen"]},"metadata":{},"sourceType":"module"}